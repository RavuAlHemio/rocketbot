#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum PresetColorValue {
    AliceBlue,
    AntiqueWhite,
    Aqua,
    Aquamarine,
    Azure,
    Beige,
    Bisque,
    Black,
    BlanchedAlmond,
    Blue,
    BlueViolet,
    Brown,
    BurlyWood,
    CadetBlue,
    Chartreuse,
    Chocolate,
    Coral,
    CornflowerBlue,
    Cornsilk,
    Crimson,
    Cyan,
    DarkBlue,
    DarkCyan,
    DarkGoldenrod,
    DarkGray,
    DarkGrey,
    DarkGreen,
    DarkKhaki,
    DarkMagenta,
    DarkOliveGreen,
    DarkOrange,
    DarkOrchid,
    DarkRed,
    DarkSalmon,
    DarkSeaGreen,
    DarkSlateBlue,
    DarkSlateGray,
    DarkSlateGrey,
    DarkTurquoise,
    DarkViolet,
    DkBlue,
    DkCyan,
    DkGoldenrod,
    DkGray,
    DkGrey,
    DkGreen,
    DkKhaki,
    DkMagenta,
    DkOliveGreen,
    DkOrange,
    DkOrchid,
    DkRed,
    DkSalmon,
    DkSeaGreen,
    DkSlateBlue,
    DkSlateGray,
    DkSlateGrey,
    DkTurquoise,
    DkViolet,
    DeepPink,
    DeepSkyBlue,
    DimGray,
    DimGrey,
    DodgerBlue,
    Firebrick,
    FloralWhite,
    ForestGreen,
    Fuchsia,
    Gainsboro,
    GhostWhite,
    Gold,
    Goldenrod,
    Gray,
    Grey,
    Green,
    GreenYellow,
    Honeydew,
    HotPink,
    IndianRed,
    Indigo,
    Ivory,
    Khaki,
    Lavender,
    LavenderBlush,
    LawnGreen,
    LemonChiffon,
    LightBlue,
    LightCoral,
    LightCyan,
    LightGoldenrodYellow,
    LightGray,
    LightGrey,
    LightGreen,
    LightPink,
    LightSalmon,
    LightSeaGreen,
    LightSkyBlue,
    LightSlateGray,
    LightSlateGrey,
    LightSteelBlue,
    LightYellow,
    LtBlue,
    LtCoral,
    LtCyan,
    LtGoldenrodYellow,
    LtGray,
    LtGrey,
    LtGreen,
    LtPink,
    LtSalmon,
    LtSeaGreen,
    LtSkyBlue,
    LtSlateGray,
    LtSlateGrey,
    LtSteelBlue,
    LtYellow,
    Lime,
    LimeGreen,
    Linen,
    Magenta,
    Maroon,
    MedAquamarine,
    MedBlue,
    MedOrchid,
    MedPurple,
    MedSeaGreen,
    MedSlateBlue,
    MedSpringGreen,
    MedTurquoise,
    MedVioletRed,
    MediumAquamarine,
    MediumBlue,
    MediumOrchid,
    MediumPurple,
    MediumSeaGreen,
    MediumSlateBlue,
    MediumSpringGreen,
    MediumTurquoise,
    MediumVioletRed,
    MidnightBlue,
    MintCream,
    MistyRose,
    Moccasin,
    NavajoWhite,
    Navy,
    OldLace,
    Olive,
    OliveDrab,
    Orange,
    OrangeRed,
    Orchid,
    PaleGoldenrod,
    PaleGreen,
    PaleTurquoise,
    PaleVioletRed,
    PapayaWhip,
    PeachPuff,
    Peru,
    Pink,
    Plum,
    PowderBlue,
    Purple,
    Red,
    RosyBrown,
    RoyalBlue,
    SaddleBrown,
    Salmon,
    SandyBrown,
    SeaGreen,
    SeaShell,
    Sienna,
    Silver,
    SkyBlue,
    SlateBlue,
    SlateGray,
    SlateGrey,
    Snow,
    SpringGreen,
    SteelBlue,
    Tan,
    Teal,
    Thistle,
    Tomato,
    Turquoise,
    Violet,
    Wheat,
    White,
    WhiteSmoke,
    Yellow,
    YellowGreen,
}
impl PresetColorValue {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "aliceBlue" => Some(Self::AliceBlue),
            "antiqueWhite" => Some(Self::AntiqueWhite),
            "aqua" => Some(Self::Aqua),
            "aquamarine" => Some(Self::Aquamarine),
            "azure" => Some(Self::Azure),
            "beige" => Some(Self::Beige),
            "bisque" => Some(Self::Bisque),
            "black" => Some(Self::Black),
            "blanchedAlmond" => Some(Self::BlanchedAlmond),
            "blue" => Some(Self::Blue),
            "blueViolet" => Some(Self::BlueViolet),
            "brown" => Some(Self::Brown),
            "burlyWood" => Some(Self::BurlyWood),
            "cadetBlue" => Some(Self::CadetBlue),
            "chartreuse" => Some(Self::Chartreuse),
            "chocolate" => Some(Self::Chocolate),
            "coral" => Some(Self::Coral),
            "cornflowerBlue" => Some(Self::CornflowerBlue),
            "cornsilk" => Some(Self::Cornsilk),
            "crimson" => Some(Self::Crimson),
            "cyan" => Some(Self::Cyan),
            "darkBlue" => Some(Self::DarkBlue),
            "darkCyan" => Some(Self::DarkCyan),
            "darkGoldenrod" => Some(Self::DarkGoldenrod),
            "darkGray" => Some(Self::DarkGray),
            "darkGrey" => Some(Self::DarkGrey),
            "darkGreen" => Some(Self::DarkGreen),
            "darkKhaki" => Some(Self::DarkKhaki),
            "darkMagenta" => Some(Self::DarkMagenta),
            "darkOliveGreen" => Some(Self::DarkOliveGreen),
            "darkOrange" => Some(Self::DarkOrange),
            "darkOrchid" => Some(Self::DarkOrchid),
            "darkRed" => Some(Self::DarkRed),
            "darkSalmon" => Some(Self::DarkSalmon),
            "darkSeaGreen" => Some(Self::DarkSeaGreen),
            "darkSlateBlue" => Some(Self::DarkSlateBlue),
            "darkSlateGray" => Some(Self::DarkSlateGray),
            "darkSlateGrey" => Some(Self::DarkSlateGrey),
            "darkTurquoise" => Some(Self::DarkTurquoise),
            "darkViolet" => Some(Self::DarkViolet),
            "dkBlue" => Some(Self::DkBlue),
            "dkCyan" => Some(Self::DkCyan),
            "dkGoldenrod" => Some(Self::DkGoldenrod),
            "dkGray" => Some(Self::DkGray),
            "dkGrey" => Some(Self::DkGrey),
            "dkGreen" => Some(Self::DkGreen),
            "dkKhaki" => Some(Self::DkKhaki),
            "dkMagenta" => Some(Self::DkMagenta),
            "dkOliveGreen" => Some(Self::DkOliveGreen),
            "dkOrange" => Some(Self::DkOrange),
            "dkOrchid" => Some(Self::DkOrchid),
            "dkRed" => Some(Self::DkRed),
            "dkSalmon" => Some(Self::DkSalmon),
            "dkSeaGreen" => Some(Self::DkSeaGreen),
            "dkSlateBlue" => Some(Self::DkSlateBlue),
            "dkSlateGray" => Some(Self::DkSlateGray),
            "dkSlateGrey" => Some(Self::DkSlateGrey),
            "dkTurquoise" => Some(Self::DkTurquoise),
            "dkViolet" => Some(Self::DkViolet),
            "deepPink" => Some(Self::DeepPink),
            "deepSkyBlue" => Some(Self::DeepSkyBlue),
            "dimGray" => Some(Self::DimGray),
            "dimGrey" => Some(Self::DimGrey),
            "dodgerBlue" => Some(Self::DodgerBlue),
            "firebrick" => Some(Self::Firebrick),
            "floralWhite" => Some(Self::FloralWhite),
            "forestGreen" => Some(Self::ForestGreen),
            "fuchsia" => Some(Self::Fuchsia),
            "gainsboro" => Some(Self::Gainsboro),
            "ghostWhite" => Some(Self::GhostWhite),
            "gold" => Some(Self::Gold),
            "goldenrod" => Some(Self::Goldenrod),
            "gray" => Some(Self::Gray),
            "grey" => Some(Self::Grey),
            "green" => Some(Self::Green),
            "greenYellow" => Some(Self::GreenYellow),
            "honeydew" => Some(Self::Honeydew),
            "hotPink" => Some(Self::HotPink),
            "indianRed" => Some(Self::IndianRed),
            "indigo" => Some(Self::Indigo),
            "ivory" => Some(Self::Ivory),
            "khaki" => Some(Self::Khaki),
            "lavender" => Some(Self::Lavender),
            "lavenderBlush" => Some(Self::LavenderBlush),
            "lawnGreen" => Some(Self::LawnGreen),
            "lemonChiffon" => Some(Self::LemonChiffon),
            "lightBlue" => Some(Self::LightBlue),
            "lightCoral" => Some(Self::LightCoral),
            "lightCyan" => Some(Self::LightCyan),
            "lightGoldenrodYellow" => Some(Self::LightGoldenrodYellow),
            "lightGray" => Some(Self::LightGray),
            "lightGrey" => Some(Self::LightGrey),
            "lightGreen" => Some(Self::LightGreen),
            "lightPink" => Some(Self::LightPink),
            "lightSalmon" => Some(Self::LightSalmon),
            "lightSeaGreen" => Some(Self::LightSeaGreen),
            "lightSkyBlue" => Some(Self::LightSkyBlue),
            "lightSlateGray" => Some(Self::LightSlateGray),
            "lightSlateGrey" => Some(Self::LightSlateGrey),
            "lightSteelBlue" => Some(Self::LightSteelBlue),
            "lightYellow" => Some(Self::LightYellow),
            "ltBlue" => Some(Self::LtBlue),
            "ltCoral" => Some(Self::LtCoral),
            "ltCyan" => Some(Self::LtCyan),
            "ltGoldenrodYellow" => Some(Self::LtGoldenrodYellow),
            "ltGray" => Some(Self::LtGray),
            "ltGrey" => Some(Self::LtGrey),
            "ltGreen" => Some(Self::LtGreen),
            "ltPink" => Some(Self::LtPink),
            "ltSalmon" => Some(Self::LtSalmon),
            "ltSeaGreen" => Some(Self::LtSeaGreen),
            "ltSkyBlue" => Some(Self::LtSkyBlue),
            "ltSlateGray" => Some(Self::LtSlateGray),
            "ltSlateGrey" => Some(Self::LtSlateGrey),
            "ltSteelBlue" => Some(Self::LtSteelBlue),
            "ltYellow" => Some(Self::LtYellow),
            "lime" => Some(Self::Lime),
            "limeGreen" => Some(Self::LimeGreen),
            "linen" => Some(Self::Linen),
            "magenta" => Some(Self::Magenta),
            "maroon" => Some(Self::Maroon),
            "medAquamarine" => Some(Self::MedAquamarine),
            "medBlue" => Some(Self::MedBlue),
            "medOrchid" => Some(Self::MedOrchid),
            "medPurple" => Some(Self::MedPurple),
            "medSeaGreen" => Some(Self::MedSeaGreen),
            "medSlateBlue" => Some(Self::MedSlateBlue),
            "medSpringGreen" => Some(Self::MedSpringGreen),
            "medTurquoise" => Some(Self::MedTurquoise),
            "medVioletRed" => Some(Self::MedVioletRed),
            "mediumAquamarine" => Some(Self::MediumAquamarine),
            "mediumBlue" => Some(Self::MediumBlue),
            "mediumOrchid" => Some(Self::MediumOrchid),
            "mediumPurple" => Some(Self::MediumPurple),
            "mediumSeaGreen" => Some(Self::MediumSeaGreen),
            "mediumSlateBlue" => Some(Self::MediumSlateBlue),
            "mediumSpringGreen" => Some(Self::MediumSpringGreen),
            "mediumTurquoise" => Some(Self::MediumTurquoise),
            "mediumVioletRed" => Some(Self::MediumVioletRed),
            "midnightBlue" => Some(Self::MidnightBlue),
            "mintCream" => Some(Self::MintCream),
            "mistyRose" => Some(Self::MistyRose),
            "moccasin" => Some(Self::Moccasin),
            "navajoWhite" => Some(Self::NavajoWhite),
            "navy" => Some(Self::Navy),
            "oldLace" => Some(Self::OldLace),
            "olive" => Some(Self::Olive),
            "oliveDrab" => Some(Self::OliveDrab),
            "orange" => Some(Self::Orange),
            "orangeRed" => Some(Self::OrangeRed),
            "orchid" => Some(Self::Orchid),
            "paleGoldenrod" => Some(Self::PaleGoldenrod),
            "paleGreen" => Some(Self::PaleGreen),
            "paleTurquoise" => Some(Self::PaleTurquoise),
            "paleVioletRed" => Some(Self::PaleVioletRed),
            "papayaWhip" => Some(Self::PapayaWhip),
            "peachPuff" => Some(Self::PeachPuff),
            "peru" => Some(Self::Peru),
            "pink" => Some(Self::Pink),
            "plum" => Some(Self::Plum),
            "powderBlue" => Some(Self::PowderBlue),
            "purple" => Some(Self::Purple),
            "red" => Some(Self::Red),
            "rosyBrown" => Some(Self::RosyBrown),
            "royalBlue" => Some(Self::RoyalBlue),
            "saddleBrown" => Some(Self::SaddleBrown),
            "salmon" => Some(Self::Salmon),
            "sandyBrown" => Some(Self::SandyBrown),
            "seaGreen" => Some(Self::SeaGreen),
            "seaShell" => Some(Self::SeaShell),
            "sienna" => Some(Self::Sienna),
            "silver" => Some(Self::Silver),
            "skyBlue" => Some(Self::SkyBlue),
            "slateBlue" => Some(Self::SlateBlue),
            "slateGray" => Some(Self::SlateGray),
            "slateGrey" => Some(Self::SlateGrey),
            "snow" => Some(Self::Snow),
            "springGreen" => Some(Self::SpringGreen),
            "steelBlue" => Some(Self::SteelBlue),
            "tan" => Some(Self::Tan),
            "teal" => Some(Self::Teal),
            "thistle" => Some(Self::Thistle),
            "tomato" => Some(Self::Tomato),
            "turquoise" => Some(Self::Turquoise),
            "violet" => Some(Self::Violet),
            "wheat" => Some(Self::Wheat),
            "white" => Some(Self::White),
            "whiteSmoke" => Some(Self::WhiteSmoke),
            "yellow" => Some(Self::Yellow),
            "yellowGreen" => Some(Self::YellowGreen),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum SchemeColorValue {
    Background1,
    Text1,
    Background2,
    Text2,
    Accent1,
    Accent2,
    Accent3,
    Accent4,
    Accent5,
    Accent6,
    Hyperlink,
    FollowedHyperlink,
    PhClr,
    Dark1,
    Light1,
    Dark2,
    Light2,
}
impl SchemeColorValue {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "bg1" => Some(Self::Background1),
            "tx1" => Some(Self::Text1),
            "bg2" => Some(Self::Background2),
            "tx2" => Some(Self::Text2),
            "accent1" => Some(Self::Accent1),
            "accent2" => Some(Self::Accent2),
            "accent3" => Some(Self::Accent3),
            "accent4" => Some(Self::Accent4),
            "accent5" => Some(Self::Accent5),
            "accent6" => Some(Self::Accent6),
            "hlink" => Some(Self::Hyperlink),
            "folHlink" => Some(Self::FollowedHyperlink),
            "phClr" => Some(Self::PhClr),
            "dk1" => Some(Self::Dark1),
            "lt1" => Some(Self::Light1),
            "dk2" => Some(Self::Dark2),
            "lt2" => Some(Self::Light2),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum SystemColorValue {
    ScrollBar,
    Background,
    ActiveCaption,
    InactiveCaption,
    Menu,
    Window,
    WindowFrame,
    MenuText,
    WindowText,
    CaptionText,
    ActiveBorder,
    InactiveBorder,
    AppWorkspace,
    Highlight,
    HighlightText,
    BtnFace,
    BtnShadow,
    GrayText,
    BtnText,
    InactiveCaptionText,
    BtnHighlight,
    ThreeDDkShadow,
    ThreeDLight,
    InfoText,
    InfoBk,
    HotLight,
    GradientActiveCaption,
    GradientInactiveCaption,
    MenuHighlight,
    MenuBar,
}
impl SystemColorValue {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "scrollBar" => Some(Self::ScrollBar),
            "background" => Some(Self::Background),
            "activeCaption" => Some(Self::ActiveCaption),
            "inactiveCaption" => Some(Self::InactiveCaption),
            "menu" => Some(Self::Menu),
            "window" => Some(Self::Window),
            "windowFrame" => Some(Self::WindowFrame),
            "menuText" => Some(Self::MenuText),
            "windowText" => Some(Self::WindowText),
            "captionText" => Some(Self::CaptionText),
            "activeBorder" => Some(Self::ActiveBorder),
            "inactiveBorder" => Some(Self::InactiveBorder),
            "appWorkspace" => Some(Self::AppWorkspace),
            "highlight" => Some(Self::Highlight),
            "highlightText" => Some(Self::HighlightText),
            "btnFace" => Some(Self::BtnFace),
            "btnShadow" => Some(Self::BtnShadow),
            "grayText" => Some(Self::GrayText),
            "btnText" => Some(Self::BtnText),
            "inactiveCaptionText" => Some(Self::InactiveCaptionText),
            "btnHighlight" => Some(Self::BtnHighlight),
            "3dDkShadow" => Some(Self::ThreeDDkShadow),
            "3dLight" => Some(Self::ThreeDLight),
            "infoText" => Some(Self::InfoText),
            "infoBk" => Some(Self::InfoBk),
            "hotLight" => Some(Self::HotLight),
            "gradientActiveCaption" => Some(Self::GradientActiveCaption),
            "gradientInactiveCaption" => Some(Self::GradientInactiveCaption),
            "menuHighlight" => Some(Self::MenuHighlight),
            "menuBar" => Some(Self::MenuBar),
            _ => None,
        }
    }
}
