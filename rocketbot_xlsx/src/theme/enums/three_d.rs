#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum PresetCameraType {
    LegacyObliqueTopLeft,
    LegacyObliqueTop,
    LegacyObliqueTopRight,
    LegacyObliqueLeft,
    LegacyObliqueFront,
    LegacyObliqueRight,
    LegacyObliqueBottomLeft,
    LegacyObliqueBottom,
    LegacyObliqueBottomRight,
    LegacyPerspectiveTopLeft,
    LegacyPerspectiveTop,
    LegacyPerspectiveTopRight,
    LegacyPerspectiveLeft,
    LegacyPerspectiveFront,
    LegacyPerspectiveRight,
    LegacyPerspectiveBottomLeft,
    LegacyPerspectiveBottom,
    LegacyPerspectiveBottomRight,
    OrthographicFront,
    IsometricTopUp,
    IsometricTopDown,
    IsometricBottomUp,
    IsometricBottomDown,
    IsometricLeftUp,
    IsometricLeftDown,
    IsometricRightUp,
    IsometricRightDown,
    IsometricOffAxis1Left,
    IsometricOffAxis1Right,
    IsometricOffAxis1Top,
    IsometricOffAxis2Left,
    IsometricOffAxis2Right,
    IsometricOffAxis2Top,
    IsometricOffAxis3Left,
    IsometricOffAxis3Right,
    IsometricOffAxis3Bottom,
    IsometricOffAxis4Left,
    IsometricOffAxis4Right,
    IsometricOffAxis4Bottom,
    ObliqueTopLeft,
    ObliqueTop,
    ObliqueTopRight,
    ObliqueLeft,
    ObliqueRight,
    ObliqueBottomLeft,
    ObliqueBottom,
    ObliqueBottomRight,
    PerspectiveFront,
    PerspectiveLeft,
    PerspectiveRight,
    PerspectiveAbove,
    PerspectiveBelow,
    PerspectiveAboveLeftFacing,
    PerspectiveAboveRightFacing,
    PerspectiveContrastingLeftFacing,
    PerspectiveContrastingRightFacing,
    PerspectiveHeroicLeftFacing,
    PerspectiveHeroicRightFacing,
    PerspectiveHeroicExtremeLeftFacing,
    PerspectiveHeroicExtremeRightFacing,
    PerspectiveRelaxed,
    PerspectiveRelaxedModerately,
}
impl PresetCameraType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "legacyObliqueTopLeft" => Some(Self::LegacyObliqueTopLeft),
            "legacyObliqueTop" => Some(Self::LegacyObliqueTop),
            "legacyObliqueTopRight" => Some(Self::LegacyObliqueTopRight),
            "legacyObliqueLeft" => Some(Self::LegacyObliqueLeft),
            "legacyObliqueFront" => Some(Self::LegacyObliqueFront),
            "legacyObliqueRight" => Some(Self::LegacyObliqueRight),
            "legacyObliqueBottomLeft" => Some(Self::LegacyObliqueBottomLeft),
            "legacyObliqueBottom" => Some(Self::LegacyObliqueBottom),
            "legacyObliqueBottomRight" => Some(Self::LegacyObliqueBottomRight),
            "legacyPerspectiveTopLeft" => Some(Self::LegacyPerspectiveTopLeft),
            "legacyPerspectiveTop" => Some(Self::LegacyPerspectiveTop),
            "legacyPerspectiveTopRight" => Some(Self::LegacyPerspectiveTopRight),
            "legacyPerspectiveLeft" => Some(Self::LegacyPerspectiveLeft),
            "legacyPerspectiveFront" => Some(Self::LegacyPerspectiveFront),
            "legacyPerspectiveRight" => Some(Self::LegacyPerspectiveRight),
            "legacyPerspectiveBottomLeft" => Some(Self::LegacyPerspectiveBottomLeft),
            "legacyPerspectiveBottom" => Some(Self::LegacyPerspectiveBottom),
            "legacyPerspectiveBottomRight" => Some(Self::LegacyPerspectiveBottomRight),
            "orthographicFront" => Some(Self::OrthographicFront),
            "isometricTopUp" => Some(Self::IsometricTopUp),
            "isometricTopDown" => Some(Self::IsometricTopDown),
            "isometricBottomUp" => Some(Self::IsometricBottomUp),
            "isometricBottomDown" => Some(Self::IsometricBottomDown),
            "isometricLeftUp" => Some(Self::IsometricLeftUp),
            "isometricLeftDown" => Some(Self::IsometricLeftDown),
            "isometricRightUp" => Some(Self::IsometricRightUp),
            "isometricRightDown" => Some(Self::IsometricRightDown),
            "isometricOffAxis1Left" => Some(Self::IsometricOffAxis1Left),
            "isometricOffAxis1Right" => Some(Self::IsometricOffAxis1Right),
            "isometricOffAxis1Top" => Some(Self::IsometricOffAxis1Top),
            "isometricOffAxis2Left" => Some(Self::IsometricOffAxis2Left),
            "isometricOffAxis2Right" => Some(Self::IsometricOffAxis2Right),
            "isometricOffAxis2Top" => Some(Self::IsometricOffAxis2Top),
            "isometricOffAxis3Left" => Some(Self::IsometricOffAxis3Left),
            "isometricOffAxis3Right" => Some(Self::IsometricOffAxis3Right),
            "isometricOffAxis3Bottom" => Some(Self::IsometricOffAxis3Bottom),
            "isometricOffAxis4Left" => Some(Self::IsometricOffAxis4Left),
            "isometricOffAxis4Right" => Some(Self::IsometricOffAxis4Right),
            "isometricOffAxis4Bottom" => Some(Self::IsometricOffAxis4Bottom),
            "obliqueTopLeft" => Some(Self::ObliqueTopLeft),
            "obliqueTop" => Some(Self::ObliqueTop),
            "obliqueTopRight" => Some(Self::ObliqueTopRight),
            "obliqueLeft" => Some(Self::ObliqueLeft),
            "obliqueRight" => Some(Self::ObliqueRight),
            "obliqueBottomLeft" => Some(Self::ObliqueBottomLeft),
            "obliqueBottom" => Some(Self::ObliqueBottom),
            "obliqueBottomRight" => Some(Self::ObliqueBottomRight),
            "perspectiveFront" => Some(Self::PerspectiveFront),
            "perspectiveLeft" => Some(Self::PerspectiveLeft),
            "perspectiveRight" => Some(Self::PerspectiveRight),
            "perspectiveAbove" => Some(Self::PerspectiveAbove),
            "perspectiveBelow" => Some(Self::PerspectiveBelow),
            "perspectiveAboveLeftFacing" => Some(Self::PerspectiveAboveLeftFacing),
            "perspectiveAboveRightFacing" => Some(Self::PerspectiveAboveRightFacing),
            "perspectiveContrastingLeftFacing" => Some(Self::PerspectiveContrastingLeftFacing),
            "perspectiveContrastingRightFacing" => Some(Self::PerspectiveContrastingRightFacing),
            "perspectiveHeroicLeftFacing" => Some(Self::PerspectiveHeroicLeftFacing),
            "perspectiveHeroicRightFacing" => Some(Self::PerspectiveHeroicRightFacing),
            "perspectiveHeroicExtremeLeftFacing" => Some(Self::PerspectiveHeroicExtremeLeftFacing),
            "perspectiveHeroicExtremeRightFacing" => Some(Self::PerspectiveHeroicExtremeRightFacing),
            "perspectiveRelaxed" => Some(Self::PerspectiveRelaxed),
            "perspectiveRelaxedModerately" => Some(Self::PerspectiveRelaxedModerately),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum LightRigType {
    LegacyFlat1,
    LegacyFlat2,
    LegacyFlat3,
    LegacyFlat4,
    LegacyNormal1,
    LegacyNormal2,
    LegacyNormal3,
    LegacyNormal4,
    LegacyHarsh1,
    LegacyHarsh2,
    LegacyHarsh3,
    LegacyHarsh4,
    ThreePt,
    Balanced,
    Soft,
    Harsh,
    Flood,
    Contrasting,
    Morning,
    Sunrise,
    Sunset,
    Chilly,
    Freezing,
    Flat,
    TwoPt,
    Glow,
    BrightRoom,
}
impl LightRigType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "legacyFlat1" => Some(Self::LegacyFlat1),
            "legacyFlat2" => Some(Self::LegacyFlat2),
            "legacyFlat3" => Some(Self::LegacyFlat3),
            "legacyFlat4" => Some(Self::LegacyFlat4),
            "legacyNormal1" => Some(Self::LegacyNormal1),
            "legacyNormal2" => Some(Self::LegacyNormal2),
            "legacyNormal3" => Some(Self::LegacyNormal3),
            "legacyNormal4" => Some(Self::LegacyNormal4),
            "legacyHarsh1" => Some(Self::LegacyHarsh1),
            "legacyHarsh2" => Some(Self::LegacyHarsh2),
            "legacyHarsh3" => Some(Self::LegacyHarsh3),
            "legacyHarsh4" => Some(Self::LegacyHarsh4),
            "threePt" => Some(Self::ThreePt),
            "balanced" => Some(Self::Balanced),
            "soft" => Some(Self::Soft),
            "harsh" => Some(Self::Harsh),
            "flood" => Some(Self::Flood),
            "contrasting" => Some(Self::Contrasting),
            "morning" => Some(Self::Morning),
            "sunrise" => Some(Self::Sunrise),
            "sunset" => Some(Self::Sunset),
            "chilly" => Some(Self::Chilly),
            "freezing" => Some(Self::Freezing),
            "flat" => Some(Self::Flat),
            "twoPt" => Some(Self::TwoPt),
            "glow" => Some(Self::Glow),
            "brightRoom" => Some(Self::BrightRoom),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum LightRigDirection {
    TopLeft,
    Top,
    TopRight,
    Left,
    Right,
    BottomLeft,
    Bottom,
    BottomRight,
}
impl LightRigDirection {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "tl" => Some(Self::TopLeft),
            "t" => Some(Self::Top),
            "tr" => Some(Self::TopRight),
            "l" => Some(Self::Left),
            "r" => Some(Self::Right),
            "bl" => Some(Self::BottomLeft),
            "b" => Some(Self::Bottom),
            "br" => Some(Self::BottomRight),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum PresetMaterialType {
    LegacyMatte,
    LegacyPlastic,
    LegacyMetal,
    LegacyWireframe,
    Matte,
    Plastic,
    Metal,
    WarmMatte,
    TranslucentPowder,
    Powder,
    DkEdge,
    SoftEdge,
    Clear,
    Flat,
    SoftMetal,
}
impl PresetMaterialType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "legacyMatte" => Some(Self::LegacyMatte),
            "legacyPlastic" => Some(Self::LegacyPlastic),
            "legacyMetal" => Some(Self::LegacyMetal),
            "legacyWireframe" => Some(Self::LegacyWireframe),
            "matte" => Some(Self::Matte),
            "plastic" => Some(Self::Plastic),
            "metal" => Some(Self::Metal),
            "warmMatte" => Some(Self::WarmMatte),
            "translucentPowder" => Some(Self::TranslucentPowder),
            "powder" => Some(Self::Powder),
            "dkEdge" => Some(Self::DkEdge),
            "softEdge" => Some(Self::SoftEdge),
            "clear" => Some(Self::Clear),
            "flat" => Some(Self::Flat),
            "softmetal" => Some(Self::SoftMetal),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum BevelPresetType {
    RelaxedInset,
    Circle,
    Slope,
    Cross,
    Angle,
    SoftRound,
    Convex,
    CoolSlant,
    Divot,
    Riblet,
    HardEdge,
    ArtDeco,
}
impl BevelPresetType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "relaxedInset" => Some(Self::RelaxedInset),
            "circle" => Some(Self::Circle),
            "slope" => Some(Self::Slope),
            "cross" => Some(Self::Cross),
            "angle" => Some(Self::Angle),
            "softRound" => Some(Self::SoftRound),
            "convex" => Some(Self::Convex),
            "coolSlant" => Some(Self::CoolSlant),
            "divot" => Some(Self::Divot),
            "riblet" => Some(Self::Riblet),
            "hardEdge" => Some(Self::HardEdge),
            "artDeco" => Some(Self::ArtDeco),
            _ => None,
        }
    }
}
