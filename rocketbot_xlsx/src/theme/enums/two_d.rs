#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum PresetPatternValue {
    Pct5,
    Pct10,
    Pct20,
    Pct25,
    Pct30,
    Pct40,
    Pct50,
    Pct60,
    Pct70,
    Pct75,
    Pct80,
    Pct90,
    Horz,
    Vert,
    LtHorz,
    LtVert,
    DkHorz,
    DkVert,
    NarHorz,
    NarVert,
    DashHorz,
    DashVert,
    Cross,
    DnDiag,
    UpDiag,
    LtDnDiag,
    LtUpDiag,
    DkDnDiag,
    DkUpDiag,
    WdDnDiag,
    WdUpDiag,
    DashDnDiag,
    DashUpDiag,
    DiagCross,
    SmCheck,
    LgCheck,
    SmGrid,
    LgGrid,
    DotGrid,
    SmConfetti,
    LgConfetti,
    HorzBrick,
    DiagBrick,
    SolidDmnd,
    OpenDmnd,
    DotDmnd,
    Plaid,
    Sphere,
    Weave,
    Divot,
    Shingle,
    Wave,
    Trellis,
    ZigZag,
}
impl PresetPatternValue {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "pct5" => Some(Self::Pct5),
            "pct10" => Some(Self::Pct10),
            "pct20" => Some(Self::Pct20),
            "pct25" => Some(Self::Pct25),
            "pct30" => Some(Self::Pct30),
            "pct40" => Some(Self::Pct40),
            "pct50" => Some(Self::Pct50),
            "pct60" => Some(Self::Pct60),
            "pct70" => Some(Self::Pct70),
            "pct75" => Some(Self::Pct75),
            "pct80" => Some(Self::Pct80),
            "pct90" => Some(Self::Pct90),
            "horz" => Some(Self::Horz),
            "vert" => Some(Self::Vert),
            "ltHorz" => Some(Self::LtHorz),
            "ltVert" => Some(Self::LtVert),
            "dkHorz" => Some(Self::DkHorz),
            "dkVert" => Some(Self::DkVert),
            "narHorz" => Some(Self::NarHorz),
            "narVert" => Some(Self::NarVert),
            "dashHorz" => Some(Self::DashHorz),
            "dashVert" => Some(Self::DashVert),
            "cross" => Some(Self::Cross),
            "dnDiag" => Some(Self::DnDiag),
            "upDiag" => Some(Self::UpDiag),
            "ltDnDiag" => Some(Self::LtDnDiag),
            "ltUpDiag" => Some(Self::LtUpDiag),
            "dkDnDiag" => Some(Self::DkDnDiag),
            "dkUpDiag" => Some(Self::DkUpDiag),
            "wdDnDiag" => Some(Self::WdDnDiag),
            "wdUpDiag" => Some(Self::WdUpDiag),
            "dashDnDiag" => Some(Self::DashDnDiag),
            "dashUpDiag" => Some(Self::DashUpDiag),
            "diagCross" => Some(Self::DiagCross),
            "smCheck" => Some(Self::SmCheck),
            "lgCheck" => Some(Self::LgCheck),
            "smGrid" => Some(Self::SmGrid),
            "lgGrid" => Some(Self::LgGrid),
            "dotGrid" => Some(Self::DotGrid),
            "smConfetti" => Some(Self::SmConfetti),
            "lgConfetti" => Some(Self::LgConfetti),
            "horzBrick" => Some(Self::HorzBrick),
            "diagBrick" => Some(Self::DiagBrick),
            "solidDmnd" => Some(Self::SolidDmnd),
            "openDmnd" => Some(Self::OpenDmnd),
            "dotDmnd" => Some(Self::DotDmnd),
            "plaid" => Some(Self::Plaid),
            "sphere" => Some(Self::Sphere),
            "weave" => Some(Self::Weave),
            "divot" => Some(Self::Divot),
            "shingle" => Some(Self::Shingle),
            "wave" => Some(Self::Wave),
            "trellis" => Some(Self::Trellis),
            "zigZag" => Some(Self::ZigZag),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum ShapeType {
    Line,
    LineInv,
    Triangle,
    RtTriangle,
    Rect,
    Diamond,
    Parallelogram,
    Trapezoid,
    NonIsoscelesTrapezoid,
    Pentagon,
    Hexagon,
    Heptagon,
    Octagon,
    Decagon,
    Dodecagon,
    Star4,
    Star5,
    Star6,
    Star7,
    Star8,
    Star10,
    Star12,
    Star16,
    Star24,
    Star32,
    RoundRect,
    Round1Rect,
    Round2SameRect,
    Round2DiagRect,
    SnipRoundRect,
    Snip1Rect,
    Snip2SameRect,
    Snip2DiagRect,
    Plaque,
    Ellipse,
    Teardrop,
    HomePlate,
    Chevron,
    PieWedge,
    Pie,
    BlockArc,
    Donut,
    NoSmoking,
    RightArrow,
    LeftArrow,
    UpArrow,
    DownArrow,
    StripedRightArrow,
    NotchedRightArrow,
    BentUpArrow,
    LeftRightArrow,
    UpDownArrow,
    LeftUpArrow,
    LeftRightUpArrow,
    QuadArrow,
    LeftArrowCallout,
    RightArrowCallout,
    UpArrowCallout,
    DownArrowCallout,
    LeftRightArrowCallout,
    UpDownArrowCallout,
    QuadArrowCallout,
    BentArrow,
    UturnArrow,
    CircularArrow,
    LeftCircularArrow,
    LeftRightCircularArrow,
    CurvedRightArrow,
    CurvedLeftArrow,
    CurvedUpArrow,
    CurvedDownArrow,
    SwooshArrow,
    Cube,
    Can,
    LightningBolt,
    Heart,
    Sun,
    Moon,
    SmileyFace,
    IrregularSeal1,
    IrregularSeal2,
    FoldedCorner,
    Bevel,
    Frame,
    HalfFrame,
    Corner,
    DiagStripe,
    Chord,
    Arc,
    LeftBracket,
    RightBracket,
    LeftBrace,
    RightBrace,
    BracketPair,
    BracePair,
    StraightConnector1,
    BentConnector2,
    BentConnector3,
    BentConnector4,
    BentConnector5,
    CurvedConnector2,
    CurvedConnector3,
    CurvedConnector4,
    CurvedConnector5,
    Callout1,
    Callout2,
    Callout3,
    AccentCallout1,
    AccentCallout2,
    AccentCallout3,
    BorderCallout1,
    BorderCallout2,
    BorderCallout3,
    AccentBorderCallout1,
    AccentBorderCallout2,
    AccentBorderCallout3,
    WedgeRectCallout,
    WedgeRoundRectCallout,
    WedgeEllipseCallout,
    CloudCallout,
    Cloud,
    Ribbon,
    Ribbon2,
    EllipseRibbon,
    EllipseRibbon2,
    LeftRightRibbon,
    VerticalScroll,
    HorizontalScroll,
    Wave,
    DoubleWave,
    Plus,
    FlowChartProcess,
    FlowChartDecision,
    FlowChartInputOutput,
    FlowChartPredefinedProcess,
    FlowChartInternalStorage,
    FlowChartDocument,
    FlowChartMultidocument,
    FlowChartTerminator,
    FlowChartPreparation,
    FlowChartManualInput,
    FlowChartManualOperation,
    FlowChartConnector,
    FlowChartPunchedCard,
    FlowChartPunchedTape,
    FlowChartSummingJunction,
    FlowChartOr,
    FlowChartCollate,
    FlowChartSort,
    FlowChartExtract,
    FlowChartMerge,
    FlowChartOfflineStorage,
    FlowChartOnlineStorage,
    FlowChartMagneticTape,
    FlowChartMagneticDisk,
    FlowChartMagneticDrum,
    FlowChartDisplay,
    FlowChartDelay,
    FlowChartAlternateProcess,
    FlowChartOffpageConnector,
    ActionButtonBlank,
    ActionButtonHome,
    ActionButtonHelp,
    ActionButtonInformation,
    ActionButtonForwardNext,
    ActionButtonBackPrevious,
    ActionButtonEnd,
    ActionButtonBeginning,
    ActionButtonReturn,
    ActionButtonDocument,
    ActionButtonSound,
    ActionButtonMovie,
    Gear6,
    Gear9,
    Funnel,
    MathPlus,
    MathMinus,
    MathMultiply,
    MathDivide,
    MathEqual,
    MathNotEqual,
    CornerTabs,
    SquareTabs,
    PlaqueTabs,
    ChartX,
    ChartStar,
    ChartPlus,
}
impl ShapeType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "line" => Some(Self::Line),
            "lineInv" => Some(Self::LineInv),
            "triangle" => Some(Self::Triangle),
            "rtTriangle" => Some(Self::RtTriangle),
            "rect" => Some(Self::Rect),
            "diamond" => Some(Self::Diamond),
            "parallelogram" => Some(Self::Parallelogram),
            "trapezoid" => Some(Self::Trapezoid),
            "nonIsoscelesTrapezoid" => Some(Self::NonIsoscelesTrapezoid),
            "pentagon" => Some(Self::Pentagon),
            "hexagon" => Some(Self::Hexagon),
            "heptagon" => Some(Self::Heptagon),
            "octagon" => Some(Self::Octagon),
            "decagon" => Some(Self::Decagon),
            "dodecagon" => Some(Self::Dodecagon),
            "star4" => Some(Self::Star4),
            "star5" => Some(Self::Star5),
            "star6" => Some(Self::Star6),
            "star7" => Some(Self::Star7),
            "star8" => Some(Self::Star8),
            "star10" => Some(Self::Star10),
            "star12" => Some(Self::Star12),
            "star16" => Some(Self::Star16),
            "star24" => Some(Self::Star24),
            "star32" => Some(Self::Star32),
            "roundRect" => Some(Self::RoundRect),
            "round1Rect" => Some(Self::Round1Rect),
            "round2SameRect" => Some(Self::Round2SameRect),
            "round2DiagRect" => Some(Self::Round2DiagRect),
            "snipRoundRect" => Some(Self::SnipRoundRect),
            "snip1Rect" => Some(Self::Snip1Rect),
            "snip2SameRect" => Some(Self::Snip2SameRect),
            "snip2DiagRect" => Some(Self::Snip2DiagRect),
            "plaque" => Some(Self::Plaque),
            "ellipse" => Some(Self::Ellipse),
            "teardrop" => Some(Self::Teardrop),
            "homePlate" => Some(Self::HomePlate),
            "chevron" => Some(Self::Chevron),
            "pieWedge" => Some(Self::PieWedge),
            "pie" => Some(Self::Pie),
            "blockArc" => Some(Self::BlockArc),
            "donut" => Some(Self::Donut),
            "noSmoking" => Some(Self::NoSmoking),
            "rightArrow" => Some(Self::RightArrow),
            "leftArrow" => Some(Self::LeftArrow),
            "upArrow" => Some(Self::UpArrow),
            "downArrow" => Some(Self::DownArrow),
            "stripedRightArrow" => Some(Self::StripedRightArrow),
            "notchedRightArrow" => Some(Self::NotchedRightArrow),
            "bentUpArrow" => Some(Self::BentUpArrow),
            "leftRightArrow" => Some(Self::LeftRightArrow),
            "upDownArrow" => Some(Self::UpDownArrow),
            "leftUpArrow" => Some(Self::LeftUpArrow),
            "leftRightUpArrow" => Some(Self::LeftRightUpArrow),
            "quadArrow" => Some(Self::QuadArrow),
            "leftArrowCallout" => Some(Self::LeftArrowCallout),
            "rightArrowCallout" => Some(Self::RightArrowCallout),
            "upArrowCallout" => Some(Self::UpArrowCallout),
            "downArrowCallout" => Some(Self::DownArrowCallout),
            "leftRightArrowCallout" => Some(Self::LeftRightArrowCallout),
            "upDownArrowCallout" => Some(Self::UpDownArrowCallout),
            "quadArrowCallout" => Some(Self::QuadArrowCallout),
            "bentArrow" => Some(Self::BentArrow),
            "uturnArrow" => Some(Self::UturnArrow),
            "circularArrow" => Some(Self::CircularArrow),
            "leftCircularArrow" => Some(Self::LeftCircularArrow),
            "leftRightCircularArrow" => Some(Self::LeftRightCircularArrow),
            "curvedRightArrow" => Some(Self::CurvedRightArrow),
            "curvedLeftArrow" => Some(Self::CurvedLeftArrow),
            "curvedUpArrow" => Some(Self::CurvedUpArrow),
            "curvedDownArrow" => Some(Self::CurvedDownArrow),
            "swooshArrow" => Some(Self::SwooshArrow),
            "cube" => Some(Self::Cube),
            "can" => Some(Self::Can),
            "lightningBolt" => Some(Self::LightningBolt),
            "heart" => Some(Self::Heart),
            "sun" => Some(Self::Sun),
            "moon" => Some(Self::Moon),
            "smileyFace" => Some(Self::SmileyFace),
            "irregularSeal1" => Some(Self::IrregularSeal1),
            "irregularSeal2" => Some(Self::IrregularSeal2),
            "foldedCorner" => Some(Self::FoldedCorner),
            "bevel" => Some(Self::Bevel),
            "frame" => Some(Self::Frame),
            "halfFrame" => Some(Self::HalfFrame),
            "corner" => Some(Self::Corner),
            "diagStripe" => Some(Self::DiagStripe),
            "chord" => Some(Self::Chord),
            "arc" => Some(Self::Arc),
            "leftBracket" => Some(Self::LeftBracket),
            "rightBracket" => Some(Self::RightBracket),
            "leftBrace" => Some(Self::LeftBrace),
            "rightBrace" => Some(Self::RightBrace),
            "bracketPair" => Some(Self::BracketPair),
            "bracePair" => Some(Self::BracePair),
            "straightConnector1" => Some(Self::StraightConnector1),
            "bentConnector2" => Some(Self::BentConnector2),
            "bentConnector3" => Some(Self::BentConnector3),
            "bentConnector4" => Some(Self::BentConnector4),
            "bentConnector5" => Some(Self::BentConnector5),
            "curvedConnector2" => Some(Self::CurvedConnector2),
            "curvedConnector3" => Some(Self::CurvedConnector3),
            "curvedConnector4" => Some(Self::CurvedConnector4),
            "curvedConnector5" => Some(Self::CurvedConnector5),
            "callout1" => Some(Self::Callout1),
            "callout2" => Some(Self::Callout2),
            "callout3" => Some(Self::Callout3),
            "accentCallout1" => Some(Self::AccentCallout1),
            "accentCallout2" => Some(Self::AccentCallout2),
            "accentCallout3" => Some(Self::AccentCallout3),
            "borderCallout1" => Some(Self::BorderCallout1),
            "borderCallout2" => Some(Self::BorderCallout2),
            "borderCallout3" => Some(Self::BorderCallout3),
            "accentBorderCallout1" => Some(Self::AccentBorderCallout1),
            "accentBorderCallout2" => Some(Self::AccentBorderCallout2),
            "accentBorderCallout3" => Some(Self::AccentBorderCallout3),
            "wedgeRectCallout" => Some(Self::WedgeRectCallout),
            "wedgeRoundRectCallout" => Some(Self::WedgeRoundRectCallout),
            "wedgeEllipseCallout" => Some(Self::WedgeEllipseCallout),
            "cloudCallout" => Some(Self::CloudCallout),
            "cloud" => Some(Self::Cloud),
            "ribbon" => Some(Self::Ribbon),
            "ribbon2" => Some(Self::Ribbon2),
            "ellipseRibbon" => Some(Self::EllipseRibbon),
            "ellipseRibbon2" => Some(Self::EllipseRibbon2),
            "leftRightRibbon" => Some(Self::LeftRightRibbon),
            "verticalScroll" => Some(Self::VerticalScroll),
            "horizontalScroll" => Some(Self::HorizontalScroll),
            "wave" => Some(Self::Wave),
            "doubleWave" => Some(Self::DoubleWave),
            "plus" => Some(Self::Plus),
            "flowChartProcess" => Some(Self::FlowChartProcess),
            "flowChartDecision" => Some(Self::FlowChartDecision),
            "flowChartInputOutput" => Some(Self::FlowChartInputOutput),
            "flowChartPredefinedProcess" => Some(Self::FlowChartPredefinedProcess),
            "flowChartInternalStorage" => Some(Self::FlowChartInternalStorage),
            "flowChartDocument" => Some(Self::FlowChartDocument),
            "flowChartMultidocument" => Some(Self::FlowChartMultidocument),
            "flowChartTerminator" => Some(Self::FlowChartTerminator),
            "flowChartPreparation" => Some(Self::FlowChartPreparation),
            "flowChartManualInput" => Some(Self::FlowChartManualInput),
            "flowChartManualOperation" => Some(Self::FlowChartManualOperation),
            "flowChartConnector" => Some(Self::FlowChartConnector),
            "flowChartPunchedCard" => Some(Self::FlowChartPunchedCard),
            "flowChartPunchedTape" => Some(Self::FlowChartPunchedTape),
            "flowChartSummingJunction" => Some(Self::FlowChartSummingJunction),
            "flowChartOr" => Some(Self::FlowChartOr),
            "flowChartCollate" => Some(Self::FlowChartCollate),
            "flowChartSort" => Some(Self::FlowChartSort),
            "flowChartExtract" => Some(Self::FlowChartExtract),
            "flowChartMerge" => Some(Self::FlowChartMerge),
            "flowChartOfflineStorage" => Some(Self::FlowChartOfflineStorage),
            "flowChartOnlineStorage" => Some(Self::FlowChartOnlineStorage),
            "flowChartMagneticTape" => Some(Self::FlowChartMagneticTape),
            "flowChartMagneticDisk" => Some(Self::FlowChartMagneticDisk),
            "flowChartMagneticDrum" => Some(Self::FlowChartMagneticDrum),
            "flowChartDisplay" => Some(Self::FlowChartDisplay),
            "flowChartDelay" => Some(Self::FlowChartDelay),
            "flowChartAlternateProcess" => Some(Self::FlowChartAlternateProcess),
            "flowChartOffpageConnector" => Some(Self::FlowChartOffpageConnector),
            "actionButtonBlank" => Some(Self::ActionButtonBlank),
            "actionButtonHome" => Some(Self::ActionButtonHome),
            "actionButtonHelp" => Some(Self::ActionButtonHelp),
            "actionButtonInformation" => Some(Self::ActionButtonInformation),
            "actionButtonForwardNext" => Some(Self::ActionButtonForwardNext),
            "actionButtonBackPrevious" => Some(Self::ActionButtonBackPrevious),
            "actionButtonEnd" => Some(Self::ActionButtonEnd),
            "actionButtonBeginning" => Some(Self::ActionButtonBeginning),
            "actionButtonReturn" => Some(Self::ActionButtonReturn),
            "actionButtonDocument" => Some(Self::ActionButtonDocument),
            "actionButtonSound" => Some(Self::ActionButtonSound),
            "actionButtonMovie" => Some(Self::ActionButtonMovie),
            "gear6" => Some(Self::Gear6),
            "gear9" => Some(Self::Gear9),
            "funnel" => Some(Self::Funnel),
            "mathPlus" => Some(Self::MathPlus),
            "mathMinus" => Some(Self::MathMinus),
            "mathMultiply" => Some(Self::MathMultiply),
            "mathDivide" => Some(Self::MathDivide),
            "mathEqual" => Some(Self::MathEqual),
            "mathNotEqual" => Some(Self::MathNotEqual),
            "cornerTabs" => Some(Self::CornerTabs),
            "squareTabs" => Some(Self::SquareTabs),
            "plaqueTabs" => Some(Self::PlaqueTabs),
            "chartX" => Some(Self::ChartX),
            "chartStar" => Some(Self::ChartStar),
            "chartPlus" => Some(Self::ChartPlus),
            _ => None,
        }
    }
}


#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum BlackWhiteMode {
    Clr,
    Auto,
    Gray,
    LtGray,
    InvGray,
    GrayWhite,
    BlackGray,
    BlackWhite,
    Black,
    White,
    Hidden,
}
impl BlackWhiteMode {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "clr" => Some(Self::Clr),
            "auto" => Some(Self::Auto),
            "gray" => Some(Self::Gray),
            "ltGray" => Some(Self::LtGray),
            "invGray" => Some(Self::InvGray),
            "grayWhite" => Some(Self::GrayWhite),
            "blackGray" => Some(Self::BlackGray),
            "blackWhite" => Some(Self::BlackWhite),
            "black" => Some(Self::Black),
            "white" => Some(Self::White),
            "hidden" => Some(Self::Hidden),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum TextVerticalOverflowType {
    Overflow,
    Ellipsis,
    Clip,
}
impl TextVerticalOverflowType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "overflow" => Some(Self::Overflow),
            "ellipsis" => Some(Self::Ellipsis),
            "clip" => Some(Self::Clip),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum TextHorizontalOverflowType {
    Overflow,
    Clip,
}
impl TextHorizontalOverflowType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "overflow" => Some(Self::Overflow),
            "clip" => Some(Self::Clip),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum TextVerticalType {
    Horz,
    Vert,
    Vert270,
    WordArtVert,
    EaVert,
    MongolianVert,
    WordArtVertRtl,
}
impl TextVerticalType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "horz" => Some(Self::Horz),
            "vert" => Some(Self::Vert),
            "vert270" => Some(Self::Vert270),
            "wordArtVert" => Some(Self::WordArtVert),
            "eaVert" => Some(Self::EaVert),
            "mongolianVert" => Some(Self::MongolianVert),
            "wordArtVertRtl" => Some(Self::WordArtVertRtl),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum TextWrappingType {
    None,
    Square,
}
impl TextWrappingType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "none" => Some(Self::None),
            "square" => Some(Self::Square),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum TextAnchoringType {
    Top,
    Center,
    Bottom,
    Justify,
    Dist,
}
impl TextAnchoringType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "t" => Some(Self::Top),
            "ctr" => Some(Self::Center),
            "b" => Some(Self::Bottom),
            "just" => Some(Self::Justify),
            "dist" => Some(Self::Dist),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum TextShapeType {
    NoShape,
    Plain,
    Stop,
    Triangle,
    TriangleInverted,
    Chevron,
    ChevronInverted,
    RingInside,
    RingOutside,
    ArchUp,
    ArchDown,
    Circle,
    Button,
    ArchUpPour,
    ArchDownPour,
    CirclePour,
    ButtonPour,
    CurveUp,
    CurveDown,
    CanUp,
    CanDown,
    Wave1,
    Wave2,
    DoubleWave1,
    Wave4,
    Inflate,
    Deflate,
    InflateBottom,
    DeflateBottom,
    InflateTop,
    DeflateTop,
    DeflateInflate,
    DeflateInflateDeflate,
    FadeRight,
    FadeLeft,
    FadeUp,
    FadeDown,
    SlantUp,
    SlantDown,
    CascadeUp,
    CascadeDown,
}
impl TextShapeType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "textNoShape" => Some(Self::NoShape),
            "textPlain" => Some(Self::Plain),
            "textStop" => Some(Self::Stop),
            "textTriangle" => Some(Self::Triangle),
            "textTriangleInverted" => Some(Self::TriangleInverted),
            "textChevron" => Some(Self::Chevron),
            "textChevronInverted" => Some(Self::ChevronInverted),
            "textRingInside" => Some(Self::RingInside),
            "textRingOutside" => Some(Self::RingOutside),
            "textArchUp" => Some(Self::ArchUp),
            "textArchDown" => Some(Self::ArchDown),
            "textCircle" => Some(Self::Circle),
            "textButton" => Some(Self::Button),
            "textArchUpPour" => Some(Self::ArchUpPour),
            "textArchDownPour" => Some(Self::ArchDownPour),
            "textCirclePour" => Some(Self::CirclePour),
            "textButtonPour" => Some(Self::ButtonPour),
            "textCurveUp" => Some(Self::CurveUp),
            "textCurveDown" => Some(Self::CurveDown),
            "textCanUp" => Some(Self::CanUp),
            "textCanDown" => Some(Self::CanDown),
            "textWave1" => Some(Self::Wave1),
            "textWave2" => Some(Self::Wave2),
            "textDoubleWave1" => Some(Self::DoubleWave1),
            "textWave4" => Some(Self::Wave4),
            "textInflate" => Some(Self::Inflate),
            "textDeflate" => Some(Self::Deflate),
            "textInflateBottom" => Some(Self::InflateBottom),
            "textDeflateBottom" => Some(Self::DeflateBottom),
            "textInflateTop" => Some(Self::InflateTop),
            "textDeflateTop" => Some(Self::DeflateTop),
            "textDeflateInflate" => Some(Self::DeflateInflate),
            "textDeflateInflateDeflate" => Some(Self::DeflateInflateDeflate),
            "textFadeRight" => Some(Self::FadeRight),
            "textFadeLeft" => Some(Self::FadeLeft),
            "textFadeUp" => Some(Self::FadeUp),
            "textFadeDown" => Some(Self::FadeDown),
            "textSlantUp" => Some(Self::SlantUp),
            "textSlantDown" => Some(Self::SlantDown),
            "textCascadeUp" => Some(Self::CascadeUp),
            "textCascadeDown" => Some(Self::CascadeDown),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum TextAlignType {
    Left,
    Center,
    Right,
    Justify,
    JustifyLow,
    Dist,
    ThaiDist,
}
impl TextAlignType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "l" => Some(Self::Left),
            "ctr" => Some(Self::Center),
            "r" => Some(Self::Right),
            "just" => Some(Self::Justify),
            "justLow" => Some(Self::JustifyLow),
            "dist" => Some(Self::Dist),
            "thaiDist" => Some(Self::ThaiDist),
            _ => None,
        }
    }
}

#[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum TextFontAlignType {
    Auto,
    Top,
    Center,
    Base,
    Bottom,
}
impl TextFontAlignType {
    pub fn try_from_str(s: &str) -> Option<Self> {
        match s {
            "auto" => Some(Self::Auto),
            "t" => Some(Self::Top),
            "ctr" => Some(Self::Center),
            "base" => Some(Self::Base),
            "b" => Some(Self::Bottom),
            _ => None,
        }
    }
}
